//
//  StyleKit.swift
//  CircularLoadingBar
//
//  Created by Gerardo Blanco Garc√≠a on 4/6/16.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let topColor: UIColor = UIColor(red: 0.000, green: 0.776, blue: 1.000, alpha: 1.000)
        static let bottomColor: UIColor = UIColor(red: 0.000, green: 0.447, blue: 1.000, alpha: 1.000)
        static let progressBarGradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.topColor.CGColor, StyleKit.bottomColor.CGColor], [0, 1])!
    }

    //// Colors

    public class var topColor: UIColor { return Cache.topColor }
    public class var bottomColor: UIColor { return Cache.bottomColor }

    //// Gradients

    public class var progressBarGradient: CGGradient { return Cache.progressBarGradient }

    //// Drawing Methods

    public class func drawCircularLoadingBar(angle angle: CGFloat = 90) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let backgroundColor = UIColor(red: 0.961, green: 0.961, blue: 0.961, alpha: 1.000)

        //// Variable Declarations
        let startAngle: CGFloat = angle * -1 + 135
        let endAngle: CGFloat = startAngle - 90

        //// Background Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 32, 32)

        let backgroundPath = UIBezierPath()
        backgroundPath.moveToPoint(CGPointMake(0, -24))
        backgroundPath.addCurveToPoint(CGPointMake(-12.38, -20.57), controlPoint1: CGPointMake(-4.53, -24), controlPoint2: CGPointMake(-8.76, -22.75))
        backgroundPath.addCurveToPoint(CGPointMake(-24, 0), controlPoint1: CGPointMake(-19.34, -16.37), controlPoint2: CGPointMake(-24, -8.73))
        backgroundPath.addCurveToPoint(CGPointMake(-0, 24), controlPoint1: CGPointMake(-24, 13.25), controlPoint2: CGPointMake(-13.25, 24))
        backgroundPath.addCurveToPoint(CGPointMake(24, 0), controlPoint1: CGPointMake(13.25, 24), controlPoint2: CGPointMake(24, 13.25))
        backgroundPath.addCurveToPoint(CGPointMake(0, -24), controlPoint1: CGPointMake(24, -13.25), controlPoint2: CGPointMake(13.25, -24))
        backgroundPath.closePath()
        backgroundPath.moveToPoint(CGPointMake(32, 0))
        backgroundPath.addCurveToPoint(CGPointMake(-0, 32), controlPoint1: CGPointMake(32, 17.67), controlPoint2: CGPointMake(17.67, 32))
        backgroundPath.addCurveToPoint(CGPointMake(-32, 0), controlPoint1: CGPointMake(-17.67, 32), controlPoint2: CGPointMake(-32, 17.67))
        backgroundPath.addCurveToPoint(CGPointMake(-19.33, -25.5), controlPoint1: CGPointMake(-32, -10.41), controlPoint2: CGPointMake(-27.03, -19.66))
        backgroundPath.addCurveToPoint(CGPointMake(0, -32), controlPoint1: CGPointMake(-13.96, -29.58), controlPoint2: CGPointMake(-7.26, -32))
        backgroundPath.addCurveToPoint(CGPointMake(32, 0), controlPoint1: CGPointMake(17.67, -32), controlPoint2: CGPointMake(32, -17.67))
        backgroundPath.closePath()
        backgroundColor.setFill()
        backgroundPath.fill()

        CGContextRestoreGState(context)


        //// Progress Bar
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Mask Path
        let maskPathRect = CGRectMake(0, 0, 64, 64)
        let maskPathPath = UIBezierPath()
        maskPathPath.addArcWithCenter(CGPointMake(maskPathRect.midX, maskPathRect.midY), radius: maskPathRect.width / 2, startAngle: -startAngle * CGFloat(M_PI)/180, endAngle: -endAngle * CGFloat(M_PI)/180, clockwise: true)
        maskPathPath.addLineToPoint(CGPointMake(maskPathRect.midX, maskPathRect.midY))
        maskPathPath.closePath()

        maskPathPath.addClip()


        //// Circle Path Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 32, 32)

        let circlePathPath = UIBezierPath()
        circlePathPath.moveToPoint(CGPointMake(0, -24))
        circlePathPath.addCurveToPoint(CGPointMake(-12.38, -20.57), controlPoint1: CGPointMake(-4.53, -24), controlPoint2: CGPointMake(-8.76, -22.75))
        circlePathPath.addCurveToPoint(CGPointMake(-24, 0), controlPoint1: CGPointMake(-19.34, -16.37), controlPoint2: CGPointMake(-24, -8.73))
        circlePathPath.addCurveToPoint(CGPointMake(-0, 24), controlPoint1: CGPointMake(-24, 13.25), controlPoint2: CGPointMake(-13.25, 24))
        circlePathPath.addCurveToPoint(CGPointMake(24, 0), controlPoint1: CGPointMake(13.25, 24), controlPoint2: CGPointMake(24, 13.25))
        circlePathPath.addCurveToPoint(CGPointMake(0, -24), controlPoint1: CGPointMake(24, -13.25), controlPoint2: CGPointMake(13.25, -24))
        circlePathPath.closePath()
        circlePathPath.moveToPoint(CGPointMake(32, 0))
        circlePathPath.addCurveToPoint(CGPointMake(-0, 32), controlPoint1: CGPointMake(32, 17.67), controlPoint2: CGPointMake(17.67, 32))
        circlePathPath.addCurveToPoint(CGPointMake(-32, 0), controlPoint1: CGPointMake(-17.67, 32), controlPoint2: CGPointMake(-32, 17.67))
        circlePathPath.addCurveToPoint(CGPointMake(-19.33, -25.5), controlPoint1: CGPointMake(-32, -10.41), controlPoint2: CGPointMake(-27.03, -19.66))
        circlePathPath.addCurveToPoint(CGPointMake(0, -32), controlPoint1: CGPointMake(-13.96, -29.58), controlPoint2: CGPointMake(-7.26, -32))
        circlePathPath.addCurveToPoint(CGPointMake(32, 0), controlPoint1: CGPointMake(17.67, -32), controlPoint2: CGPointMake(32, -17.67))
        circlePathPath.closePath()
        CGContextSaveGState(context)
        circlePathPath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.progressBarGradient, CGPointMake(-0, -32), CGPointMake(0, 32), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

}
